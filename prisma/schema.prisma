// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String
  role      UserRole @default(STUDENT)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  evaluations Evaluation[]
  submissions Submission[]

  @@map("users")
}

model Criteria {
  id          String  @id @default(cuid())
  name        String
  description String?
  weight      Float   @default(1.0)
  maxScore    Int     @default(10)
  isActive    Boolean @default(true)
  order       Int     @default(0)

  // Relations
  evaluations CriteriaEvaluation[]

  @@map("criteria")
}

model Category {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  submissions Submission[]

  @@map("categories")
}

model Submission {
  id          String   @id @default(cuid())
  title       String
  description String?
  categoryId  String?
  studentId   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  student     User         @relation(fields: [studentId], references: [id])
  category    Category?    @relation(fields: [categoryId], references: [id])
  evaluations Evaluation[]
  files       SubmissionFile[]

  @@map("submissions")
}

model SubmissionFile {
  id           String   @id @default(cuid())
  submissionId String
  fileName     String
  fileUrl      String
  fileSize     Int
  fileType     String?
  createdAt    DateTime @default(now())

  // Relations
  submission Submission @relation(fields: [submissionId], references: [id], onDelete: Cascade)

  @@map("submission_files")
}

model Evaluation {
  id           String   @id @default(cuid())
  submissionId String
  evaluatorId  String
  totalScore   Float?
  feedback     String?
  isCompleted  Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  submission         Submission           @relation(fields: [submissionId], references: [id])
  evaluator          User                 @relation(fields: [evaluatorId], references: [id])
  criteriaEvaluations CriteriaEvaluation[]

  @@unique([submissionId, evaluatorId])
  @@map("evaluations")
}

model CriteriaEvaluation {
  id           String  @id @default(cuid())
  evaluationId String
  criteriaId   String
  score        Float
  feedback     String?

  // Relations
  evaluation Evaluation @relation(fields: [evaluationId], references: [id])
  criteria   Criteria   @relation(fields: [criteriaId], references: [id])

  @@unique([evaluationId, criteriaId])
  @@map("criteria_evaluations")
}

enum UserRole {
  STUDENT
  EVALUATOR
  ADMIN
}